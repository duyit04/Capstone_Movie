import { useState, useEffect } from "react";
import { Table, Space, Button, Input, Popconfirm, message, notification, Modal } from "antd";
import { SearchOutlined, EditOutlined, DeleteOutlined, CalendarOutlined, PlusOutlined, CheckCircleOutlined, CloseCircleOutlined, ReloadOutlined } from "@ant-design/icons";
import { Link, useNavigate } from "react-router-dom";
import api from "../../../services/api";
import { DEFAULT_GROUP_CODE } from "../../../config/constants";

export default function FilmManagement() {
  const navigate = useNavigate();
  const [movies, setMovies] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [lastUpdated, setLastUpdated] = useState(null);
  
  // T·∫°o API cho notification
  const [notificationApi, contextHolder] = notification.useNotification();
  
  // H√†m x·ª≠ l√Ω l·ªói chung
  const handleError = (error, action) => {
    console.error(`‚ùå L·ªói khi ${action}:`, error);
    
    // X·ª≠ l√Ω c√°c lo·∫°i l·ªói kh√°c nhau
    if (error.response) {
      // L·ªói t·ª´ server
      const status = error.response.status;
      const errorMessage = error.response.data?.content || error.response.data?.message || 'L·ªói kh√¥ng x√°c ƒë·ªãnh';
      
      console.log('üìä Chi ti·∫øt l·ªói server:', {
        status: status,
        statusText: error.response.statusText,
        data: error.response.data,
        url: error.config?.url,
        method: error.config?.method
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói d·∫°ng notification
      notificationApi.error({
        message: `L·ªói ${status}: Kh√¥ng th·ªÉ ${action}`,
        description: errorMessage,
        placement: 'topRight',
        duration: 10,
        icon: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o l·ªói chi ti·∫øt
      Modal.error({
        title: `Kh√¥ng th·ªÉ ${action}`,
        content: (
          <div>
            <p><strong>M√£ l·ªói:</strong> {status}</p>
            <p><strong>Chi ti·∫øt:</strong> {errorMessage}</p>
            {status === 401 && <p><strong>L∆∞u √Ω:</strong> Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i.</p>}
            {status === 403 && <p><strong>L∆∞u √Ω:</strong> B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y.</p>}
            {status === 500 && <p><strong>L∆∞u √Ω:</strong> C√≥ l·ªói x·∫£y ra ·ªü m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.</p>}
          </div>
        ),
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o d·∫°ng message
      if (status === 401) {
        message.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      } else if (status === 403) {
        message.error(`B·∫°n kh√¥ng c√≥ quy·ªÅn ${action}!`);
      } else {
        message.error(errorMessage);
      }
    } else if (error.request) {
      // L·ªói network
      console.log('üåê L·ªói network:', error.request);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói network d·∫°ng notification
      notificationApi.error({
        message: 'L·ªói k·∫øt n·ªëi',
        description: `Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server khi ${action}. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.`,
        placement: 'topRight',
        duration: 10,
        icon: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o l·ªói network
      Modal.error({
        title: 'L·ªói k·∫øt n·ªëi m·∫°ng',
        content: (
          <div>
            <p>Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß khi {action}.</p>
            <p>Vui l√≤ng ki·ªÉm tra:</p>
            <ul>
              <li>K·∫øt n·ªëi internet c·ªßa b·∫°n</li>
              <li>T∆∞·ªùng l·ª≠a ho·∫∑c proxy</li>
              <li>M√°y ch·ªß c√≥ th·ªÉ ƒëang b·∫£o tr√¨</li>
            </ul>
          </div>
        ),
      });
      
      message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!");
    } else {
      // L·ªói kh√°c
      console.log('‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh:', error.message);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói kh√¥ng x√°c ƒë·ªãnh d·∫°ng notification
      notificationApi.error({
        message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        description: error.message || `ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi ${action}.`,
        placement: 'topRight',
        duration: 10,
        icon: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o l·ªói kh√¥ng x√°c ƒë·ªãnh
      Modal.error({
        title: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        content: (
          <div>
            <p>ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi {action}: {error.message || 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt.'}</p>
            <p>Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu l·ªói v·∫´n ti·∫øp t·ª•c.</p>
          </div>
        ),
      });
      
      message.error(error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
    }
  };
  
  // Ki·ªÉm tra token x√°c th·ª±c
  const checkAuth = () => {
    const token = localStorage.getItem("ACCESS_TOKEN") || localStorage.getItem("accessToken");
    if (!token) {
      message.error("Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      return false;
    }
    return token;
  };
  
  useEffect(() => {
    // Ki·ªÉm tra x√°c th·ª±c th·ª±c t·∫ø
    const userInfo = localStorage.getItem("USER_INFO") || localStorage.getItem("USER_LOGIN");
    if (userInfo) {
      const user = JSON.parse(userInfo);
      if (user.maLoaiNguoiDung !== "QuanTri") {
        message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn truy c·∫≠p trang n√†y!");
        navigate("/");
        return;
      }
    } else {
      navigate("/admin/login");
      return;
    }
    
    fetchMovies();
    
    // Th√™m event listener ƒë·ªÉ l·∫Øng nghe khi quay l·∫°i t·ª´ trang th√™m phim
    const handleFocus = () => {
      console.log('üîÑ Trang ƒë∆∞·ª£c focus l·∫°i, refresh danh s√°ch phim...');
      fetchMovies();
    };
    
    // Th√™m event listener ƒë·ªÉ l·∫Øng nghe khi quay l·∫°i t·ª´ trang th√™m phim
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        console.log('üëÅÔ∏è Trang ƒë∆∞·ª£c hi·ªÉn th·ªã l·∫°i, refresh danh s√°ch phim...');
        fetchMovies();
      }
    };
    
    window.addEventListener('focus', handleFocus);
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    return () => {
      window.removeEventListener('focus', handleFocus);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, [navigate]);
  
  const fetchMovies = async (keyword = "") => {
    try {
      setLoading(true);
      const token = checkAuth();
      if (!token) return;
      
      const url = keyword 
        ? `QuanLyPhim/LayDanhSachPhim?maNhom=${DEFAULT_GROUP_CODE}&tenPhim=${keyword}`
        : `QuanLyPhim/LayDanhSachPhim?maNhom=${DEFAULT_GROUP_CODE}`;
        
      const result = await api.get(url, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      // S·∫Øp x·∫øp phim m·ªõi nh·∫•t l√™n ƒë·∫ßu (∆∞u ti√™n phim m·ªõi th√™m)
      const sortedMovies = result.data.content.sort((a, b) => {
        // ∆Øu ti√™n 1: S·∫Øp x·∫øp theo maPhim (phim m·ªõi th∆∞·ªùng c√≥ maPhim l·ªõn h∆°n)
        const maPhimComparison = Number(b.maPhim) - Number(a.maPhim);
        
        // ∆Øu ti√™n 2: N·∫øu maPhim b·∫±ng nhau, s·∫Øp x·∫øp theo ng√†y kh·ªüi chi·∫øu m·ªõi nh·∫•t
        if (maPhimComparison === 0 && a.ngayKhoiChieu && b.ngayKhoiChieu) {
          return new Date(b.ngayKhoiChieu) - new Date(a.ngayKhoiChieu);
        }
        
        return maPhimComparison;
      });
      
      // Debug log ƒë·ªÉ ki·ªÉm tra th·ª© t·ª± s·∫Øp x·∫øp
      console.log('üé¨ Danh s√°ch phim ƒë√£ s·∫Øp x·∫øp (phim m·ªõi nh·∫•t l√™n ƒë·∫ßu):', 
        sortedMovies.slice(0, 3).map(m => ({ 
          maPhim: m.maPhim, 
          tenPhim: m.tenPhim, 
          ngayKhoiChieu: m.ngayKhoiChieu 
        }))
      );
      
      setMovies(sortedMovies);
      setLastUpdated(new Date());
    } catch (err) {
      console.error("Failed to fetch movies:", err);
      handleError(err, "t·∫£i danh s√°ch phim");
      setMovies([]); // Set empty array on error
    } finally {
      setLoading(false);
    }
  };
  
  const handleSearch = () => {
    fetchMovies(searchText);
  };
  
  const handleDelete = async (movieId) => {
    try {
      setLoading(true);
      const token = checkAuth();
      if (!token) return;
      
      // T√¨m th√¥ng tin phim tr∆∞·ªõc khi x√≥a ƒë·ªÉ hi·ªÉn th·ªã t√™n
      const movieToDelete = movies.find(movie => movie.maPhim === movieId);
      const movieName = movieToDelete ? movieToDelete.tenPhim : 'Phim';
      
      // Hi·ªÉn th·ªã loading message
      message.loading({
        content: `ƒêang x√≥a phim "${movieName}"...`,
        duration: 0,
        key: 'deleteMovie'
      });
      
      await api.delete(`QuanLyPhim/XoaPhim?MaPhim=${movieId}`, {
        headers: {
          Authorization: `Bearer ${token}`
        }
      });
      
      // ƒê√≥ng loading message
      message.destroy('deleteMovie');
      
      // Th√¥ng b√°o x√≥a th√†nh c√¥ng ƒë·∫πp h∆°n v·ªõi t√™n phim
      message.success({
        content: `üóëÔ∏è Phim "${movieName}" ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`,
        duration: 3,
        style: {
          fontSize: '16px',
          fontWeight: 'bold',
        },
        icon: <span style={{ fontSize: '18px' }}>‚úÖ</span>,
      });
      
      // Hi·ªÉn th·ªã notification
      notificationApi.success({
        message: 'X√≥a phim th√†nh c√¥ng',
        description: `Phim "${movieName}" ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng.`,
        placement: 'topRight',
        icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
        duration: 5
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o
      setTimeout(() => {
        Modal.success({
          title: 'X√≥a phim th√†nh c√¥ng!',
          content: `Phim "${movieName}" ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng.`,
        });
      }, 300);
      
      // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ phim ƒë√£ x√≥a
      console.log('üóëÔ∏è Phim ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng:', {
        maPhim: movieId,
        tenPhim: movieName,
        hinhAnh: movieToDelete?.hinhAnh,
        moTa: movieToDelete?.moTa
      });
      
      fetchMovies(); // Refresh the list
    } catch (err) {
      console.error("Failed to delete movie:", err);
      
      // ƒê√≥ng loading n·∫øu c√≥
      message.destroy('deleteMovie');
      
      // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω l·ªói chung
      handleError(err, `x√≥a phim "${movieToDelete?.tenPhim || 'Phim'}"`);
    } finally {
      setLoading(false);
    }
  };
  
  const columns = [
    {
      title: "M√£ phim",
      dataIndex: "maPhim",
      key: "maPhim",
      sorter: (a, b) => a.maPhim - b.maPhim,
    },
    {
      title: "H√¨nh ·∫£nh",
      dataIndex: "hinhAnh",
      key: "hinhAnh",
      render: (text) => (
        <img 
          src={text} 
          alt="Movie" 
          style={{ width: 50, height: 50, objectFit: "cover" }}
          onError={(e) => {
            e.target.src = "https://via.placeholder.com/50x50?text=No+Image";
          }}
        />
      ),
    },
    {
      title: "T√™n phim",
      dataIndex: "tenPhim",
      key: "tenPhim",
      sorter: (a, b) => a.tenPhim.localeCompare(b.tenPhim),
    },
    {
      title: "M√¥ t·∫£",
      dataIndex: "moTa",
      key: "moTa",
      render: (text) => (
        <p className="truncate max-w-xs">{text}</p>
      ),
    },
    {
      title: "Tr·∫°ng th√°i",
      key: "trangThai",
      render: (_, record) => {
        // Hi·ªÉn th·ªã tr·∫°ng th√°i ch√≠nh (ƒëang chi·∫øu ho·∫∑c s·∫Øp chi·∫øu)
        let trangThai = '';
        let bgColor = '';
        let textColor = '';
        
        if (record.dangChieu) {
          trangThai = 'ƒêang chi·∫øu';
          bgColor = 'bg-green-100';
          textColor = 'text-green-800';
        } else if (record.sapChieu) {
          trangThai = 'S·∫Øp chi·∫øu';
          bgColor = 'bg-blue-100';
          textColor = 'text-blue-800';
        } else {
          // M·∫∑c ƒë·ªãnh l√† s·∫Øp chi·∫øu n·∫øu kh√¥ng c√≥ tr·∫°ng th√°i n√†o
          trangThai = 'S·∫Øp chi·∫øu';
          bgColor = 'bg-blue-100';
          textColor = 'text-blue-800';
        }
        
        return (
          <Space size="small">
            <span className={`px-2 py-1 ${bgColor} ${textColor} rounded-full text-xs`}>
              {trangThai}
            </span>
            {/* Hi·ªÉn th·ªã tr·∫°ng th√°i Hot n·∫øu c√≥ */}
            {record.hot && (
              <span className="px-2 py-1 bg-red-100 text-red-800 rounded-full text-xs">
                Hot
              </span>
            )}
          </Space>
        );
      },
    },
    {
      title: "H√†nh ƒë·ªông",
      key: "action",
      render: (_, record) => (
        <Space size="middle">
          <Link to={`/admin/films/edit/${record.maPhim}`}>
            <Button type="primary" icon={<EditOutlined />} size="small">
              S·ª≠a
            </Button>
          </Link>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a phim n√†y?"
            onConfirm={() => handleDelete(record.maPhim)}
            okText="X√≥a"
            cancelText="H·ªßy"
          >
            <Button danger icon={<DeleteOutlined />} size="small">
              X√≥a
            </Button>
          </Popconfirm>
          <Link to={`/admin/films/showtime/${record.maPhim}`}>
            <Button icon={<CalendarOutlined />} size="small">
              T·∫°o l·ªãch chi·∫øu
            </Button>
          </Link>
        </Space>
      ),
    },
  ];
  
  return (
    <div className="container mx-auto py-8">
      {contextHolder} {/* Th√™m contextHolder ƒë·ªÉ hi·ªÉn th·ªã notification */}
      <div className="bg-white rounded-lg shadow-lg p-6">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h1 className="text-2xl font-bold">Qu·∫£n l√Ω phim</h1>
            <p className="text-gray-600 text-sm mt-1">
              üìç Phim m·ªõi th√™m s·∫Ω hi·ªÉn th·ªã ·ªü tr√™n c√πng
              <span className="ml-2 text-green-600">
                ‚Ä¢ T·ªïng: {movies.length} phim
              </span>
              {lastUpdated && (
                <span className="ml-2 text-blue-600">
                  ‚Ä¢ C·∫≠p nh·∫≠t l√∫c: {lastUpdated.toLocaleTimeString('vi-VN')}
                </span>
              )}
            </p>
          </div>
          <Link to="/admin/films/addnew">
            <Button type="primary" icon={<PlusOutlined />} size="large">
              Th√™m phim m·ªõi
            </Button>
          </Link>
        </div>
        
        <div className="mb-6">
          <div className="flex gap-2 items-center">
            <Input
              placeholder="T√¨m ki·∫øm phim theo t√™n"
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              onPressEnter={handleSearch}
              prefix={<SearchOutlined />}
              allowClear
              style={{ flex: 1, maxWidth: '400px' }}
            />
            <Button type="primary" onClick={handleSearch}>
              T√¨m ki·∫øm
            </Button>
            <Button 
              icon={<ReloadOutlined />} 
              onClick={() => {
                console.log('üîÑ Manual refresh danh s√°ch phim...');
                fetchMovies();
                message.success('ƒê√£ refresh danh s√°ch phim!');
              }}
              title="Refresh danh s√°ch phim"
            >
              Refresh
            </Button>
          </div>
        </div>
        
        <Table
          columns={columns}
          dataSource={movies}
          rowKey="maPhim"
          loading={loading}
          pagination={{ pageSize: 10 }}
        />
      </div>
    </div>
  );
}
