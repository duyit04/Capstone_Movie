import { useState, useEffect } from "react";
import { Table, Button, Input, Space, Popconfirm, message, Modal, Form, Select, notification } from "antd";
import { SearchOutlined, PlusOutlined, EditOutlined, DeleteOutlined, CheckCircleOutlined, WarningOutlined, CloseCircleOutlined, ReloadOutlined } from "@ant-design/icons";
import api from "../../../services/api";
import { DEFAULT_GROUP_CODE } from "../../../config/constants";

const { Option } = Select;

export default function AddUserPage() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  const [searchText, setSearchText] = useState("");
  const [modalVisible, setModalVisible] = useState(false);
  const [editingUser, setEditingUser] = useState(null);
  const [form] = Form.useForm();
  const [userTypes, setUserTypes] = useState([]);
  const [lastUpdated, setLastUpdated] = useState(null);
  
  // Thi·∫øt l·∫≠p notification cho to√†n b·ªô component
  const [notificationApi, contextHolder] = notification.useNotification();

  // H√†m x·ª≠ l√Ω l·ªói chung
  const handleError = (error, action = "th·ª±c hi·ªán h√†nh ƒë·ªông") => {
    // ƒê√≥ng t·∫•t c·∫£ loading message
    message.destroy();
    
    if (error.response) {
      // L·ªói t·ª´ server
      const status = error.response.status;
      const errorData = error.response.data;
      // C·ªë g·∫Øng l·∫•y message l·ªói t·ª´ nhi·ªÅu ƒë·ªãnh d·∫°ng response kh√°c nhau
      const errorMessage = 
        errorData?.content || 
        errorData?.message || 
        errorData?.error || 
        (typeof errorData === 'string' ? errorData : 'L·ªói kh√¥ng x√°c ƒë·ªãnh');
      
      console.log('üìä Chi ti·∫øt l·ªói server:', {
        status: status,
        statusText: error.response.statusText,
        data: error.response.data,
        url: error.config?.url,
        method: error.config?.method
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói d·∫°ng notification
      notificationApi.error({
        message: `L·ªói ${status}: Kh√¥ng th·ªÉ ${action}`,
        description: errorMessage,
        placement: 'topRight',
        duration: 10,
        icon: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o l·ªói chi ti·∫øt
      Modal.error({
        title: `Kh√¥ng th·ªÉ ${action}`,
        content: (
          <div>
            <p><strong>M√£ l·ªói:</strong> {status}</p>
            <p><strong>Chi ti·∫øt:</strong> {errorMessage}</p>
            {status === 409 && <p><strong>L∆∞u √Ω:</strong> T√†i kho·∫£n ho·∫∑c email c√≥ th·ªÉ ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng.</p>}
            {status === 500 && <p><strong>L∆∞u √Ω:</strong> C√≥ l·ªói x·∫£y ra ·ªü m√°y ch·ªß. Vui l√≤ng th·ª≠ l·∫°i sau.</p>}
          </div>
        ),
      });
      
      // Hi·ªÉn th·ªã th√¥ng b√°o d·∫°ng message
      if (status === 401) {
        message.error("Phi√™n ƒëƒÉng nh·∫≠p ƒë√£ h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
      } else if (status === 403) {
        message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán thao t√°c n√†y!");
      } else if (status === 400) {
        message.error(errorMessage);
      } else if (status === 409) {
        message.error("T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i ho·∫∑c email ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng!");
      } else if (status === 500) {
        message.error(errorMessage);
      } else {
        message.error(errorMessage);
      }
    } else if (error.request) {
      // L·ªói network
      console.log('üåê L·ªói network:', error.request);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói k·∫øt n·ªëi d·∫°ng notification
      notificationApi.error({
        message: 'L·ªói k·∫øt n·ªëi',
        description: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng c·ªßa b·∫°n.',
        placement: 'topRight',
        duration: 10,
        icon: <WarningOutlined style={{ color: '#faad14' }} />
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o l·ªói k·∫øt n·ªëi
      Modal.error({
        title: 'L·ªói k·∫øt n·ªëi m·∫°ng',
        content: (
          <div>
            <p>Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn m√°y ch·ªß.</p>
            <p>Vui l√≤ng ki·ªÉm tra:</p>
            <ul>
              <li>K·∫øt n·ªëi internet c·ªßa b·∫°n</li>
              <li>T∆∞·ªùng l·ª≠a ho·∫∑c proxy</li>
              <li>M√°y ch·ªß c√≥ th·ªÉ ƒëang b·∫£o tr√¨</li>
            </ul>
          </div>
        ),
      });
      
      message.error("Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng!");
    } else {
      // L·ªói kh√°c
      console.log('‚ùì L·ªói kh√¥ng x√°c ƒë·ªãnh:', error.message);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o l·ªói kh√¥ng x√°c ƒë·ªãnh d·∫°ng notification
      notificationApi.error({
        message: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        description: error.message || 'ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh khi x·ª≠ l√Ω y√™u c·∫ßu.',
        placement: 'topRight',
        duration: 10,
        icon: <CloseCircleOutlined style={{ color: '#ff4d4f' }} />
      });
      
      // Hi·ªÉn th·ªã modal th√¥ng b√°o l·ªói kh√¥ng x√°c ƒë·ªãnh
      Modal.error({
        title: 'L·ªói kh√¥ng x√°c ƒë·ªãnh',
        content: (
          <div>
            <p>ƒê√£ x·∫£y ra l·ªói kh√¥ng x√°c ƒë·ªãnh: {error.message || 'Kh√¥ng c√≥ th√¥ng tin chi ti·∫øt.'}</p>
            <p>Vui l√≤ng th·ª≠ l·∫°i sau ho·∫∑c li√™n h·ªá qu·∫£n tr·ªã vi√™n n·∫øu l·ªói v·∫´n ti·∫øp t·ª•c.</p>
          </div>
        ),
      });
      
      message.error(error.message || "L·ªói kh√¥ng x√°c ƒë·ªãnh");
    }
  };

  useEffect(() => {
    fetchUsers();
    fetchUserTypes();
    
    // Th√™m event listener ƒë·ªÉ l·∫Øng nghe khi quay l·∫°i t·ª´ trang kh√°c
    const handleFocus = () => {
      console.log('üîÑ Trang ƒë∆∞·ª£c focus l·∫°i, refresh danh s√°ch ng∆∞·ªùi d√πng...');
      fetchUsers();
    };
    
    // Th√™m event listener ƒë·ªÉ l·∫Øng nghe khi quay l·∫°i t·ª´ trang kh√°c
    const handleVisibilityChange = () => {
      if (!document.hidden) {
        console.log('üëÅÔ∏è Trang ƒë∆∞·ª£c hi·ªÉn th·ªã l·∫°i, refresh danh s√°ch ng∆∞·ªùi d√πng...');
        fetchUsers();
      }
    };
    
    window.addEventListener('focus', handleFocus);
    document.addEventListener('visibilitychange', handleVisibilityChange);
    
    return () => {
      window.removeEventListener('focus', handleFocus);
      document.removeEventListener('visibilitychange', handleVisibilityChange);
    };
  }, []);

  const fetchUsers = async (keyword = "") => {
    try {
      setLoading(true);
      const url = keyword 
        ? `/QuanLyNguoiDung/LayDanhSachNguoiDung?MaNhom=${DEFAULT_GROUP_CODE}&tuKhoa=${keyword}`
        : `/QuanLyNguoiDung/LayDanhSachNguoiDung?MaNhom=${DEFAULT_GROUP_CODE}`;

      console.log('üîÑ G·ªçi API l·∫•y danh s√°ch ng∆∞·ªùi d√πng:', url);
      const response = await api.get(url);
      
      console.log('‚úÖ API l·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng:', response.data);
      
      // Ki·ªÉm tra c·∫•u tr√∫c d·ªØ li·ªáu tr·∫£ v·ªÅ
      if (response.data && response.data.content) {
        console.log('üìä C·∫•u tr√∫c d·ªØ li·ªáu ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n:', response.data.content[0]);
        console.log('üîç C√°c tr∆∞·ªùng c√≥ s·∫µn:', Object.keys(response.data.content[0] || {}));
        
        // Ki·ªÉm tra tr∆∞·ªùng soDt/soDT (API c√≥ th·ªÉ tr·∫£ v·ªÅ c·∫£ hai)
        const usersWithSdt = response.data.content.filter(user => user.soDt || user.soDT);
        const usersWithoutSdt = response.data.content.filter(user => !user.soDt && !user.soDT);
        
        console.log('üì± Ng∆∞·ªùi d√πng c√≥ s·ªë ƒëi·ªán tho·∫°i:', usersWithSdt.length);
        console.log('‚ùå Ng∆∞·ªùi d√πng kh√¥ng c√≥ s·ªë ƒëi·ªán tho·∫°i:', usersWithoutSdt.length);
        
        if (usersWithoutSdt.length > 0) {
          console.log('‚ö†Ô∏è Ng∆∞·ªùi d√πng thi·∫øu s·ªë ƒëi·ªán tho·∫°i:', usersWithoutSdt.map(u => ({ taiKhoan: u.taiKhoan, hoTen: u.hoTen })));
        }
        
        // Chu·∫©n h√≥a d·ªØ li·ªáu ƒë·ªÉ c√≥ tr∆∞·ªùng soDt nh·∫•t qu√°n
        const normalizedUsers = response.data.content.map(user => ({
          ...user,
          soDt: user.soDt || user.soDT || '' // ∆Øu ti√™n soDt, n·∫øu kh√¥ng c√≥ th√¨ d√πng soDT
        }));
        
        // S·∫Øp x·∫øp ng∆∞·ªùi d√πng m·ªõi nh·∫•t l√™n ƒë·∫ßu (∆∞u ti√™n ng∆∞·ªùi d√πng m·ªõi th√™m)
        const sortedUsers = normalizedUsers.sort((a, b) => {
          // ∆Øu ti√™n 1: S·∫Øp x·∫øp theo th·ªùi gian t·∫°o (ng∆∞·ªùi d√πng m·ªõi nh·∫•t l√™n ƒë·∫ßu)
          // S·ª≠ d·ª•ng taiKhoan ƒë·ªÉ ∆∞·ªõc t√≠nh th·ª© t·ª± th·ªùi gian
          if (a.taiKhoan && b.taiKhoan) {
            // Th·ª≠ so s√°nh theo s·ªë n·∫øu taiKhoan c√≥ d·∫°ng s·ªë
            const aNum = parseInt(a.taiKhoan);
            const bNum = parseInt(b.taiKhoan);
            
            if (!isNaN(aNum) && !isNaN(bNum)) {
              // N·∫øu c·∫£ hai ƒë·ªÅu l√† s·ªë, s·∫Øp x·∫øp theo th·ª© t·ª± gi·∫£m d·∫ßn (s·ªë l·ªõn h∆°n = m·ªõi h∆°n)
              return bNum - aNum;
            } else {
              // N·∫øu kh√¥ng ph·∫£i s·ªë, s·∫Øp x·∫øp theo th·ª© t·ª± alphabet ng∆∞·ª£c (Z->A)
              // Gi·∫£ ƒë·ªãnh t√†i kho·∫£n m·ªõi h∆°n c√≥ th·ª© t·ª± alphabet cao h∆°n
              return b.taiKhoan.localeCompare(a.taiKhoan);
            }
          }
          
          // ∆Øu ti√™n 2: N·∫øu taiKhoan b·∫±ng nhau ho·∫∑c kh√¥ng c√≥, s·∫Øp x·∫øp theo hoTen
          if (a.hoTen && b.hoTen) {
            return a.hoTen.localeCompare(b.hoTen);
          }
          
          return 0;
        });
        
        // Debug log ƒë·ªÉ ki·ªÉm tra th·ª© t·ª± s·∫Øp x·∫øp
        console.log('üìã Danh s√°ch ng∆∞·ªùi d√πng sau khi s·∫Øp x·∫øp (ng∆∞·ªùi d√πng m·ªõi nh·∫•t l√™n ƒë·∫ßu):', 
          sortedUsers.slice(0, 5).map(u => ({ 
            taiKhoan: u.taiKhoan, 
            hoTen: u.hoTen,
            email: u.email,
            order: 'M·ªõi nh·∫•t' // ƒê√°nh d·∫•u ng∆∞·ªùi d√πng m·ªõi nh·∫•t
          }))
        );
        
        // Log th√¥ng tin v·ªÅ logic s·∫Øp x·∫øp
        console.log('üîÑ Logic s·∫Øp x·∫øp: Ng∆∞·ªùi d√πng m·ªõi nh·∫•t s·∫Ω hi·ªÉn th·ªã ·ªü ƒë·∫ßu danh s√°ch');
        console.log('üìä T·ªïng s·ªë ng∆∞·ªùi d√πng:', sortedUsers.length);
        console.log('ü•á Ng∆∞·ªùi d√πng ƒë·∫ßu ti√™n (m·ªõi nh·∫•t):', sortedUsers[0]?.taiKhoan);
        console.log('ü•à Ng∆∞·ªùi d√πng th·ª© hai:', sortedUsers[1]?.taiKhoan);
        
        setUsers(sortedUsers);
        setLastUpdated(new Date());
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi t·∫£i danh s√°ch ng∆∞·ªùi d√πng:", error);
      
      // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω l·ªói chung
      handleError(error, "t·∫£i danh s√°ch ng∆∞·ªùi d√πng");
    } finally {
      setLoading(false);
    }
  };

  const fetchUserTypes = async () => {
    try {
      const response = await api.get("/QuanLyNguoiDung/LayDanhSachLoaiNguoiDung");
      setUserTypes(response.data.content);
    } catch (error) {
      console.error("L·ªói khi t·∫£i danh s√°ch lo·∫°i ng∆∞·ªùi d√πng:", error);
      handleError(error, "t·∫£i danh s√°ch lo·∫°i ng∆∞·ªùi d√πng");
    }
  };

  const handleSearch = () => {
    if (!searchText.trim()) {
      message.info('Vui l√≤ng nh·∫≠p t·ª´ kh√≥a t√¨m ki·∫øm!');
      return;
    }
    
    message.loading({
      content: `ƒêang t√¨m ki·∫øm ng∆∞·ªùi d√πng v·ªõi t·ª´ kh√≥a "${searchText}"...`,
      duration: 0,
      key: 'searchUsers'
    });
    
    fetchUsers(searchText).then(() => {
      message.destroy('searchUsers');
      const resultCount = users.filter(user => 
        user.taiKhoan.toLowerCase().includes(searchText.toLowerCase()) ||
        user.hoTen.toLowerCase().includes(searchText.toLowerCase())
      ).length;
      
      if (resultCount > 0) {
        message.success({
          content: `üîç T√¨m th·∫•y ${resultCount} ng∆∞·ªùi d√πng v·ªõi t·ª´ kh√≥a "${searchText}"`,
          duration: 3,
          style: {
            fontSize: '14px',
            fontWeight: 'bold',
          },
        });
        notificationApi.success({
          message: 'T√¨m ki·∫øm th√†nh c√¥ng',
          description: `T√¨m th·∫•y ${resultCount} ng∆∞·ªùi d√πng ph√π h·ª£p v·ªõi t·ª´ kh√≥a "${searchText}".`,
          placement: 'topRight',
          icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
          duration: 5
        });
      } else {
        message.warning({
          content: `üîç Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng n√†o v·ªõi t·ª´ kh√≥a "${searchText}"`,
          duration: 3,
          style: {
            fontSize: '14px',
            fontWeight: 'bold',
          },
        });
        notificationApi.warning({
          message: 'Kh√¥ng t√¨m th·∫•y k·∫øt qu·∫£',
          description: `Kh√¥ng c√≥ ng∆∞·ªùi d√πng n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a "${searchText}".`,
          placement: 'topRight',
          icon: <WarningOutlined style={{ color: '#faad14' }} />,
          duration: 5
        });
      }
    }).catch((error) => {
      message.destroy('searchUsers');
      message.error('Kh√¥ng th·ªÉ th·ª±c hi·ªán t√¨m ki·∫øm!');
      console.error('‚ùå L·ªói khi t√¨m ki·∫øm:', error);
    });
  };

  const handleAddUser = () => {
    setEditingUser(null);
    form.resetFields();
    setModalVisible(true);
  };

  const handleEditUser = (user) => {
    setEditingUser(user);
    form.setFieldsValue({
      taiKhoan: user.taiKhoan,
      hoTen: user.hoTen,
      email: user.email,
      soDt: user.soDt || user.soDT || '', // X·ª≠ l√Ω c·∫£ hai tr∆∞·ªùng
      maLoaiNguoiDung: user.maLoaiNguoiDung,
      matKhau: "********", // M·∫≠t kh·∫©u kh√¥ng ƒë∆∞·ª£c g·ª≠i t·ª´ API, s·ª≠ d·ª•ng placeholder
    });
    setModalVisible(true);
  };

  const handleDeleteUser = async (taiKhoan) => {
    // Khai b√°o bi·∫øn ·ªü ph·∫°m vi function ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong catch
    let userToDelete = null;
    let userFullName = taiKhoan;
    
    try {
      console.log('üîÑ B·∫Øt ƒë·∫ßu x√≥a ng∆∞·ªùi d√πng:', taiKhoan);
      
      // Ki·ªÉm tra quy·ªÅn admin
      const currentUser = localStorage.getItem("USER_INFO") || localStorage.getItem("USER_LOGIN");
      if (!currentUser) {
        message.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p!");
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ƒëƒÉng nh·∫≠p');
        return;
      }
      
      const currentUserInfo = JSON.parse(currentUser);
      console.log('üë§ Ng∆∞·ªùi d√πng hi·ªán t·∫°i:', currentUserInfo);
      
             // Ki·ªÉm tra quy·ªÅn admin - s·ª≠ d·ª•ng ƒë√∫ng m√£ "QuanTri"
       if (currentUserInfo.maLoaiNguoiDung !== "QuanTri") {
         message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a ng∆∞·ªùi d√πng!");
         console.log('‚ùå Kh√¥ng c√≥ quy·ªÅn admin, maLoaiNguoiDung:', currentUserInfo.maLoaiNguoiDung);
         return;
       }
      
      // Ki·ªÉm tra xem c√≥ ph·∫£i ng∆∞·ªùi d√πng ƒëang ƒëƒÉng nh·∫≠p kh√¥ng
      if (currentUserInfo.taiKhoan === taiKhoan) {
        message.error("Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p!");
        console.log('‚ùå Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n ƒëang ƒëƒÉng nh·∫≠p');
        return;
      }
      
      // T√¨m th√¥ng tin ng∆∞·ªùi d√πng tr∆∞·ªõc khi x√≥a ƒë·ªÉ hi·ªÉn th·ªã h·ªç t√™n
      userToDelete = users.find(user => user.taiKhoan === taiKhoan);
      userFullName = userToDelete ? userToDelete.hoTen : taiKhoan;
      
      console.log('üéØ Ng∆∞·ªùi d√πng c·∫ßn x√≥a:', {
        taiKhoan: taiKhoan,
        hoTen: userFullName,
        email: userToDelete?.email,
        soDt: userToDelete?.soDt || userToDelete?.soDT,
        maLoaiNguoiDung: userToDelete?.maLoaiNguoiDung,
        coTonTai: !!userToDelete,
        danhSachUsers: users.map(u => ({ taiKhoan: u.taiKhoan, hoTen: u.hoTen }))
      });
      
      if (!userToDelete) {
        message.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng ƒë·ªÉ x√≥a!");
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng');
        return;
      }
      
             // Ki·ªÉm tra xem c√≥ ph·∫£i admin kh√¥ng - s·ª≠ d·ª•ng ƒë√∫ng m√£ "QuanTri"
       if (userToDelete.maLoaiNguoiDung === "QuanTri") {
         message.warning("C·∫©n th·∫≠n! B·∫°n ƒëang x√≥a m·ªôt t√†i kho·∫£n qu·∫£n tr·ªã!");
         console.log('‚ö†Ô∏è C·∫£nh b√°o: ƒêang x√≥a t√†i kho·∫£n qu·∫£n tr·ªã, maLoaiNguoiDung:', userToDelete.maLoaiNguoiDung);
       }
      
      // Ki·ªÉm tra token x√°c th·ª±c
      const token = localStorage.getItem("ACCESS_TOKEN") || localStorage.getItem("accessToken");
      if (!token) {
        message.error("Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c!");
        console.log('‚ùå Kh√¥ng t√¨m th·∫•y token x√°c th·ª±c');
        return;
      }
      
      console.log('üîë Token x√°c th·ª±c:', token.substring(0, 20) + '...');
      
      // Hi·ªÉn th·ªã loading
      message.loading({
        content: `ƒêang x√≥a ng∆∞·ªùi d√πng "${userFullName}"...`,
        duration: 0,
        key: 'deleteUser'
      });
      
      console.log('üöÄ G·ªçi API x√≥a ng∆∞·ªùi d√πng...');
      console.log('üì° API URL:', `/QuanLyNguoiDung/XoaNguoiDung?TaiKhoan=${taiKhoan}`);
      console.log('üîë Headers:', { Authorization: `Bearer ${token}` });
      
      const response = await api.delete(`/QuanLyNguoiDung/XoaNguoiDung?TaiKhoan=${taiKhoan}`);
      
      console.log('‚úÖ API x√≥a th√†nh c√¥ng:', response);
      
      // ƒê√≥ng loading
      message.destroy('deleteUser');
      
             // Hi·ªÉn th·ªã message th√¥ng b√°o x√≥a th√†nh c√¥ng ƒë·∫πp m·∫Øt
       message.success({
         content: `üóëÔ∏è Ng∆∞·ªùi d√πng "${userFullName}" (${taiKhoan}) ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!`,
         duration: 4,
         style: {
           marginTop: '20vh',
           fontSize: '16px',
           fontWeight: 'bold',
         },
         icon: <span style={{ fontSize: '20px' }}>‚úÖ</span>,
       });
       
       // Hi·ªÉn th·ªã notification
       notificationApi.success({
         message: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng! üóëÔ∏è',
         description: `Ng∆∞·ªùi d√πng "${userFullName}" (${taiKhoan}) ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng.`,
         placement: 'topRight',
         icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
         duration: 8
       });
      
             // Hi·ªÉn th·ªã modal th√¥ng b√°o x√≥a th√†nh c√¥ng
       setTimeout(() => {
         Modal.success({
           title: 'X√≥a ng∆∞·ªùi d√πng th√†nh c√¥ng! üóëÔ∏è',
           content: (
             <div>
               <p>Ng∆∞·ªùi d√πng <strong>"{userFullName}"</strong> ƒë√£ ƒë∆∞·ª£c x√≥a kh·ªèi h·ªá th·ªëng th√†nh c√¥ng!</p>
               <div className="mt-4 p-3 bg-red-50 rounded">
                 <p><strong>Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ x√≥a:</strong></p>
                 <ul className="list-disc list-inside mt-2">
                   <li><strong>T√†i kho·∫£n:</strong> {taiKhoan}</li>
                   <li><strong>H·ªç t√™n:</strong> {userFullName}</li>
                   <li><strong>Email:</strong> {userToDelete?.email || 'Kh√¥ng c√≥'}</li>
                   <li><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {userToDelete?.soDt || userToDelete?.soDT || 'Kh√¥ng c√≥'}</li>
                   <li><strong>Lo·∫°i ng∆∞·ªùi d√πng:</strong> {userToDelete?.maLoaiNguoiDung === 'QuanTri' ? 'Qu·∫£n tr·ªã' : 'Kh√°ch h√†ng'}</li>
                 </ul>
               </div>
               <p className="mt-3 text-orange-600">‚ö†Ô∏è H√†nh ƒë·ªông n√†y kh√¥ng th·ªÉ ho√†n t√°c!</p>
             </div>
           ),
         });
       }, 300);
       
       // Hi·ªÉn th·ªã th√¥ng tin chi ti·∫øt v·ªÅ ng∆∞·ªùi d√πng ƒë√£ x√≥a
       console.log('üóëÔ∏è Ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng:', {
         taiKhoan: taiKhoan,
         hoTen: userFullName,
         email: userToDelete?.email,
         soDt: userToDelete?.soDt || userToDelete?.soDT,
         maLoaiNguoiDung: userToDelete?.maLoaiNguoiDung,
         response: response.data
       });
       
       // Refresh danh s√°ch ng∆∞·ªùi d√πng
       console.log('üîÑ Refresh danh s√°ch ng∆∞·ªùi d√πng...');
       fetchUsers(searchText);
      
    } catch (error) {
      console.error("‚ùå L·ªói khi x√≥a ng∆∞·ªùi d√πng:", error);
      
      // ƒê√≥ng loading n·∫øu c√≥
      message.destroy('deleteUser');
      
      // Th√™m th√¥ng tin v·ªÅ ng∆∞·ªùi d√πng ƒëang c·ªë g·∫Øng x√≥a
      console.log('üéØ Th√¥ng tin ng∆∞·ªùi d√πng ƒëang x√≥a:', {
        taiKhoan: taiKhoan,
        userToDelete: userToDelete,
        userFullName: userFullName
      });
      
      // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω l·ªói chung
      handleError(error, `x√≥a ng∆∞·ªùi d√πng "${userFullName}"`);
    }
  };

  const handleModalOk = async () => {
    try {
      const values = await form.validateFields();
      
      // Hi·ªÉn th·ªã loading
      const loadingMessage = message.loading({
        content: editingUser ? 'ƒêang c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng...' : 'ƒêang th√™m ng∆∞·ªùi d√πng...',
        duration: 0,
        key: 'userAction'
      });
      
      if (editingUser) {
        // C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng
        console.log('üîÑ B·∫Øt ƒë·∫ßu c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng:', editingUser.taiKhoan);
        
        // Chu·∫©n b·ªã d·ªØ li·ªáu c·∫≠p nh·∫≠t - KH√îNG g·ª≠i m·∫≠t kh·∫©u placeholder
        const updateData = {
          taiKhoan: values.taiKhoan,
          hoTen: values.hoTen,
          email: values.email,
          soDt: values.soDt,
          maLoaiNguoiDung: values.maLoaiNguoiDung,
          maNhom: DEFAULT_GROUP_CODE,
        };
        
        // Ch·ªâ g·ª≠i m·∫≠t kh·∫©u n·∫øu ng∆∞·ªùi d√πng th·ª±c s·ª± thay ƒë·ªïi (kh√¥ng ph·∫£i placeholder)
        if (values.matKhau && values.matKhau !== "********") {
          updateData.matKhau = values.matKhau;
          console.log('üîê M·∫≠t kh·∫©u s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t');
        } else {
          console.log('üîê Kh√¥ng c·∫≠p nh·∫≠t m·∫≠t kh·∫©u (gi·ªØ nguy√™n)');
        }
        
        console.log('üì§ D·ªØ li·ªáu c·∫≠p nh·∫≠t s·∫Ω g·ª≠i:', updateData);
        console.log('üì° API URL:', "/QuanLyNguoiDung/CapNhatThongTinNguoiDung");
        
        const response = await api.post("/QuanLyNguoiDung/CapNhatThongTinNguoiDung", updateData);
        
        console.log('‚úÖ API c·∫≠p nh·∫≠t th√†nh c√¥ng:', response.data);
        
        // ƒê√≥ng loading v√† hi·ªÉn th·ªã th√†nh c√¥ng
        message.destroy('userAction');
        
                 // Hi·ªÉn th·ªã message th√¥ng b√°o c·∫≠p nh·∫≠t th√†nh c√¥ng ƒë·∫πp m·∫Øt
         message.success({
           content: `‚úÖ Th√¥ng tin ng∆∞·ªùi d√πng "${values.hoTen}" ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!`,
           duration: 4,
           style: {
             marginTop: '20vh',
             fontSize: '16px',
             fontWeight: 'bold',
           },
           icon: <span style={{ fontSize: '20px' }}>üîÑ</span>,
         });
         
         // Hi·ªÉn th·ªã notification
         notificationApi.success({
           message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng! ‚úÖ',
           description: `Th√¥ng tin ng∆∞·ªùi d√πng "${values.hoTen}" (${values.taiKhoan}) ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t.`,
           placement: 'topRight',
           icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
           duration: 8
         });
         
         // Hi·ªÉn th·ªã modal th√¥ng b√°o chi ti·∫øt
         setTimeout(() => {
           Modal.success({
             title: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng! ‚úÖ',
             content: (
               <div>
                 <p>Th√¥ng tin ng∆∞·ªùi d√πng <strong>"{values.hoTen}"</strong> ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng!</p>
                 <div className="mt-4 p-3 bg-blue-50 rounded">
                   <p><strong>Th√¥ng tin ƒë√£ c·∫≠p nh·∫≠t:</strong></p>
                   <ul className="list-disc list-inside mt-2">
                     <li><strong>T√†i kho·∫£n:</strong> {values.taiKhoan}</li>
                     <li><strong>H·ªç t√™n:</strong> {values.hoTen}</li>
                     <li><strong>Email:</strong> {values.email}</li>
                     <li><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {values.soDt}</li>
                     <li><strong>Lo·∫°i ng∆∞·ªùi d√πng:</strong> {values.maLoaiNguoiDung === 'QuanTri' ? 'Qu·∫£n tr·ªã' : 'Kh√°ch h√†ng'}</li>
                   </ul>
                 </div>
                 <p className="mt-3 text-green-600">Thay ƒë·ªïi ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o h·ªá th·ªëng!</p>
               </div>
             ),
           });
         }, 300);
        
        console.log('‚úÖ C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng:', {
          taiKhoan: values.taiKhoan,
          hoTen: values.hoTen,
          email: values.email,
          soDt: values.soDt,
          maLoaiNguoiDung: values.maLoaiNguoiDung,
          response: response.data
        });
      } else {
        // Th√™m ng∆∞·ªùi d√πng m·ªõi
        console.log('üîÑ B·∫Øt ƒë·∫ßu th√™m ng∆∞·ªùi d√πng m·ªõi');
        
        const newUserData = {
          ...values,
          maNhom: DEFAULT_GROUP_CODE,
        };
        
        console.log('üì§ D·ªØ li·ªáu th√™m m·ªõi s·∫Ω g·ª≠i:', newUserData);
        console.log('üì° API URL:', "/QuanLyNguoiDung/ThemNguoiDung");
        
        const response = await api.post("/QuanLyNguoiDung/ThemNguoiDung", newUserData);
        
        console.log('‚úÖ API th√™m m·ªõi th√†nh c√¥ng:', response.data);
        
        // ƒê√≥ng loading v√† hi·ªÉn th·ªã th√¥ng b√°o th√†nh c√¥ng
        message.destroy('userAction');
        
                 // Hi·ªÉn th·ªã message th√¥ng b√°o th√†nh c√¥ng ƒë·∫πp m·∫Øt
         message.success({
           content: `üéâ Ng∆∞·ªùi d√πng "${values.hoTen}" ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng!`,
           duration: 4,
           style: {
             marginTop: '20vh',
             fontSize: '16px',
             fontWeight: 'bold',
           },
           icon: <span style={{ fontSize: '20px' }}>‚úÖ</span>,
         });
         
         // Hi·ªÉn th·ªã notification (g√≥c m√†n h√¨nh)
         notificationApi.success({
           message: 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng! üéâ',
           description: `Ng∆∞·ªùi d√πng "${values.hoTen}" (${values.taiKhoan}) ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng.`,
           placement: 'topRight',
           icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
           duration: 8
         });
         
         // Hi·ªÉn th·ªã modal th√¥ng b√°o chi ti·∫øt
         setTimeout(() => {
           Modal.success({
             title: 'Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng! üéâ',
             content: (
               <div>
                 <p>Ng∆∞·ªùi d√πng <strong>"{values.hoTen}"</strong> ƒë√£ ƒë∆∞·ª£c th√™m v√†o h·ªá th·ªëng th√†nh c√¥ng!</p>
                 <div className="mt-4 p-3 bg-green-50 rounded">
                   <p><strong>Th√¥ng tin ng∆∞·ªùi d√πng ƒë√£ t·∫°o:</strong></p>
                   <ul className="list-disc list-inside mt-2">
                     <li><strong>T√†i kho·∫£n:</strong> {values.taiKhoan}</li>
                     <li><strong>H·ªç t√™n:</strong> {values.hoTen}</li>
                     <li><strong>Email:</strong> {values.email}</li>
                     <li><strong>S·ªë ƒëi·ªán tho·∫°i:</strong> {values.soDt}</li>
                     <li><strong>Lo·∫°i ng∆∞·ªùi d√πng:</strong> {values.maLoaiNguoiDung === 'QuanTri' ? 'Qu·∫£n tr·ªã' : 'Kh√°ch h√†ng'}</li>
                   </ul>
                 </div>
                 <p className="mt-3 text-blue-600">
                   <strong>üéØ Ng∆∞·ªùi d√πng m·ªõi s·∫Ω hi·ªÉn th·ªã ·ªü ƒë·∫ßu danh s√°ch!</strong>
                 </p>
                 <p className="mt-2 text-gray-600 text-sm">
                   Danh s√°ch ƒë∆∞·ª£c s·∫Øp x·∫øp theo th·ª© t·ª±: M·ªõi nh·∫•t ‚Üí C≈© nh·∫•t
                 </p>
               </div>
             ),
           });
         }, 300);
        
        console.log('üë§ Th√™m ng∆∞·ªùi d√πng th√†nh c√¥ng:', {
          taiKhoan: values.taiKhoan,
          hoTen: values.hoTen,
          email: values.email,
          soDt: values.soDt,
          maLoaiNguoiDung: values.maLoaiNguoiDung,
          response: response.data
        });
      }
      
      setModalVisible(false);
      form.resetFields();
      
      // T·ª± ƒë·ªông c·∫≠p nh·∫≠t danh s√°ch ng∆∞·ªùi d√πng
      fetchUsers(searchText);
      
      // Hi·ªÉn th·ªã th√¥ng b√°o to√†n m√†n h√¨nh n·∫øu th√™m m·ªõi
      if (!editingUser) {
        message.info("Trang s·∫Ω t·ª± ƒë·ªông l√†m m·ªõi sau 2 gi√¢y ƒë·ªÉ hi·ªÉn th·ªã ng∆∞·ªùi d√πng m·ªõi ·ªü ƒë·∫ßu danh s√°ch");
        setTimeout(() => {
          // T·ª± ƒë·ªông l√†m m·ªõi trang sau khi th√™m ng∆∞·ªùi d√πng m·ªõi
          console.log('üîÑ T·ª± ƒë·ªông refresh ƒë·ªÉ hi·ªÉn th·ªã ng∆∞·ªùi d√πng m·ªõi ·ªü ƒë·∫ßu danh s√°ch');
          fetchUsers("");
        }, 2000);
      }
    } catch (error) {
      console.error("‚ùå L·ªói khi l∆∞u th√¥ng tin ng∆∞·ªùi d√πng:", error);
      
      // ƒê√≥ng loading n·∫øu c√≥
      message.destroy('userAction');
      
      // L·∫•y th√¥ng tin t·ª´ form ƒë·ªÉ debug
      const formValues = form.getFieldsValue();
      console.log('ÔøΩ Gi√° tr·ªã form khi x·∫£y ra l·ªói:', formValues);
      
      // S·ª≠ d·ª•ng h√†m x·ª≠ l√Ω l·ªói chung
      handleError(error, editingUser ? 
        `c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng "${formValues.hoTen}"` : 
        `th√™m ng∆∞·ªùi d√πng "${formValues.hoTen}"`);
    }
  };

  const columns = [
    {
      title: (
        <div style={{ 
          fontWeight: '600', 
          color: '#1f2937',
          fontSize: '14px',
          padding: '8px 0'
        }}>
          T√†i kho·∫£n
        </div>
      ),
      dataIndex: "taiKhoan",
      key: "taiKhoan",
      width: 180,
      render: (text) => (
        <div style={{
          fontWeight: '500',
          color: '#374151',
          fontSize: '13px',
          padding: '4px 8px',
          backgroundColor: '#f3f4f6',
          borderRadius: '6px',
          display: 'inline-block',
          minWidth: '80px',
          textAlign: 'center'
        }}>
          {text}
        </div>
      ),
    },
    {
      title: (
        <div style={{ 
          fontWeight: '600', 
          color: '#1f2937',
          fontSize: '14px',
          padding: '8px 0'
        }}>
          H·ªç t√™n
        </div>
      ),
      dataIndex: "hoTen",
      key: "hoTen",
      width: 220,
      render: (text) => (
        <div style={{
          fontWeight: '500',
          color: '#111827',
          fontSize: '14px',
          padding: '4px 0'
        }}>
          {text}
        </div>
      ),
    },
    {
      title: (
        <div style={{ 
          fontWeight: '600', 
          color: '#1f2937',
          fontSize: '14px',
          padding: '8px 0'
        }}>
          Email
        </div>
      ),
      dataIndex: "email",
      key: "email",
      width: 250,
      render: (text) => (
        <div style={{
          color: '#059669',
          fontSize: '13px',
          padding: '4px 0',
          wordBreak: 'break-word'
        }}>
          {text}
        </div>
      ),
    },
    {
      title: (
        <div style={{ 
          fontWeight: '600', 
          color: '#1f2937',
          fontSize: '14px',
          padding: '8px 0'
        }}>
          S·ªë ƒëi·ªán tho·∫°i
        </div>
      ),
      dataIndex: "soDt",
      key: "soDt",
      width: 180,
      render: (soDt, record) => {
        // X·ª≠ l√Ω c·∫£ hai tr∆∞·ªùng soDt v√† soDT
        const phoneNumber = soDt || record.soDT;
        if (!phoneNumber || phoneNumber === '') {
          return (
            <span style={{ 
              color: '#9ca3af', 
              fontStyle: 'italic',
              fontSize: '12px',
              padding: '4px 8px',
              backgroundColor: '#f9fafb',
              borderRadius: '4px',
              border: '1px dashed #d1d5db'
            }}>
              Ch∆∞a c√≥
            </span>
          );
        }
        return (
          <div style={{
            color: '#374151',
            fontSize: '13px',
            padding: '4px 8px',
            backgroundColor: '#f0f9ff',
            borderRadius: '6px',
            border: '1px solid #e0f2fe'
          }}>
            {phoneNumber}
          </div>
        );
      },
    },
    {
      title: (
        <div style={{ 
          fontWeight: '600', 
          color: '#1f2937',
          fontSize: '14px',
          padding: '8px 0'
        }}>
          Lo·∫°i ng∆∞·ªùi d√πng
        </div>
      ),
      dataIndex: "maLoaiNguoiDung",
      key: "maLoaiNguoiDung",
      width: 160,
      render: (type) => {
        const isAdmin = type === "QuanTri";
        return (
          <div style={{
            padding: '4px 12px',
            borderRadius: '20px',
            fontSize: '12px',
            fontWeight: '600',
            textAlign: 'center',
            backgroundColor: isAdmin ? '#fef3c7' : '#dbeafe',
            color: isAdmin ? '#92400e' : '#1e40af',
            border: `1px solid ${isAdmin ? '#fbbf24' : '#60a5fa'}`,
            minWidth: '80px'
          }}>
            {isAdmin ? "Qu·∫£n tr·ªã" : "Kh√°ch h√†ng"}
          </div>
        );
      },
    },
    {
      title: (
        <div style={{ 
          fontWeight: '600', 
          color: '#1f2937',
          fontSize: '14px',
          padding: '8px 0',
          textAlign: 'center'
        }}>
          Thao t√°c
        </div>
      ),
      key: "action",
      width: 180,
      render: (_, record) => (
        <Space size="small">
          <Button
            type="primary"
            icon={<EditOutlined />}
            onClick={() => handleEditUser(record)}
            size="small"
            style={{
              borderRadius: '6px',
              height: '32px',
              padding: '0 12px',
              fontSize: '12px',
              fontWeight: '500'
            }}
          >
            S·ª≠a
          </Button>
          <Popconfirm
            title="B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ng∆∞·ªùi d√πng n√†y?"
            onConfirm={() => handleDeleteUser(record.taiKhoan)}
            okText="X√≥a"
            cancelText="H·ªßy"
            placement="top"
          >
            <Button 
              danger 
              icon={<DeleteOutlined />} 
              size="small"
              style={{
                borderRadius: '6px',
                height: '32px',
                padding: '0 12px',
                fontSize: '12px',
                fontWeight: '500'
              }}
            >
              X√≥a
            </Button>
          </Popconfirm>
        </Space>
      ),
    },
  ];

  return (
    <div style={{ padding: '24px', backgroundColor: '#f8fafc', minHeight: '100vh' }}>
      {contextHolder} {/* ƒê·∫∑t contextHolder ƒë·ªÉ hi·ªÉn th·ªã notification */}
      <div style={{ 
        marginBottom: 24, 
        backgroundColor: 'white', 
        padding: '24px', 
        borderRadius: '12px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        border: '1px solid #e5e7eb'
      }}>
        <h1 style={{ 
          fontSize: '28px', 
          marginBottom: '16px', 
          color: '#1f2937',
          fontWeight: '700',
          display: 'flex',
          alignItems: 'center',
          gap: '12px'
        }}>
          üë• Qu·∫£n l√Ω Ng∆∞·ªùi d√πng
        </h1>
        <div style={{ 
          display: 'flex', 
          flexWrap: 'wrap', 
          gap: '16px', 
          alignItems: 'center',
          padding: '16px',
          backgroundColor: '#f8fafc',
          borderRadius: '8px',
          border: '1px solid #e2e8f0'
        }}>
          <div style={{ 
            display: 'flex', 
            alignItems: 'center', 
            gap: '8px',
            padding: '8px 16px',
            backgroundColor: '#fef3c7',
            borderRadius: '20px',
            border: '1px solid #fbbf24'
          }}>
            üìç <strong style={{ color: '#92400e' }}>Ng∆∞·ªùi d√πng m·ªõi nh·∫•t s·∫Ω hi·ªÉn th·ªã ·ªü ƒë·∫ßu danh s√°ch</strong>
          </div>
          <div style={{ 
            padding: '8px 16px',
            backgroundColor: '#dbeafe',
            borderRadius: '20px',
            border: '1px solid #60a5fa',
            color: '#1e40af',
            fontWeight: '500'
          }}>
            üë• T·ªïng: <strong>{users.length}</strong> ng∆∞·ªùi d√πng
          </div>
          {lastUpdated && (
            <div style={{ 
              padding: '8px 16px',
              backgroundColor: '#dcfce7',
              borderRadius: '20px',
              border: '1px solid #4ade80',
              color: '#166534',
              fontWeight: '500'
            }}>
              ‚è∞ C·∫≠p nh·∫≠t l√∫c: <strong>{lastUpdated.toLocaleTimeString('vi-VN')}</strong>
            </div>
          )}
                     <div style={{ 
             padding: '8px 16px',
             backgroundColor: '#f3e8ff',
             borderRadius: '20px',
             border: '1px solid #a78bfa',
             color: '#7c3aed',
             fontWeight: '500'
           }}>
             üîÑ S·∫Øp x·∫øp: M·ªõi nh·∫•t ‚Üí C≈© nh·∫•t
           </div>
        </div>
      </div>
      
      <div style={{ 
        marginBottom: 24, 
        backgroundColor: 'white', 
        padding: '20px', 
        borderRadius: '12px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        border: '1px solid #e5e7eb'
      }}>
        <div style={{ 
          display: 'flex', 
          flexWrap: 'wrap', 
          gap: '16px', 
          alignItems: 'center',
          justifyContent: 'space-between'
        }}>
          <div style={{ 
            display: 'flex', 
            flexWrap: 'wrap', 
            gap: '12px', 
            alignItems: 'center'
          }}>
            <Input
              placeholder="üîç T√¨m ki·∫øm theo t√†i kho·∫£n ho·∫∑c h·ªç t√™n..."
              value={searchText}
              onChange={(e) => setSearchText(e.target.value)}
              onPressEnter={handleSearch}
              style={{ 
                width: 350,
                borderRadius: '8px',
                border: '1px solid #d1d5db',
                padding: '8px 16px',
                fontSize: '14px'
              }}
              prefix={<SearchOutlined style={{ color: '#9ca3af' }} />}
            />
            <Button 
              type="primary" 
              icon={<SearchOutlined />} 
              onClick={handleSearch}
              style={{
                borderRadius: '8px',
                height: '40px',
                padding: '0 20px',
                fontSize: '14px',
                fontWeight: '500',
                backgroundColor: '#3b82f6',
                border: 'none',
                boxShadow: '0 2px 4px rgba(59, 130, 246, 0.3)'
              }}
            >
              T√¨m ki·∫øm
            </Button>
            <Button 
              icon={<ReloadOutlined />} 
              onClick={() => {
                console.log('üîÑ Manual refresh danh s√°ch ng∆∞·ªùi d√πng...');
                message.loading({
                  content: 'ƒêang refresh danh s√°ch ng∆∞·ªùi d√πng...',
                  duration: 0,
                  key: 'refreshUsers'
                });
                fetchUsers().then(() => {
                  message.destroy('refreshUsers');
                  message.success({
                    content: 'üîÑ ƒê√£ refresh danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng!',
                    duration: 3,
                    style: {
                      fontSize: '14px',
                      fontWeight: 'bold',
                    },
                  });
                  notificationApi.success({
                    message: 'Refresh th√†nh c√¥ng',
                    description: `Danh s√°ch ng∆∞·ªùi d√πng ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t. T·ªïng: ${users.length} ng∆∞·ªùi d√πng.`,
                    placement: 'topRight',
                    icon: <CheckCircleOutlined style={{ color: '#52c41a' }} />,
                    duration: 5
                  });
                }).catch((error) => {
                  message.destroy('refreshUsers');
                  message.error('Kh√¥ng th·ªÉ refresh danh s√°ch ng∆∞·ªùi d√πng!');
                  console.error('‚ùå L·ªói khi refresh:', error);
                });
              }}
              title="Refresh danh s√°ch ng∆∞·ªùi d√πng"
              style={{
                borderRadius: '8px',
                height: '40px',
                padding: '0 20px',
                fontSize: '14px',
                fontWeight: '500',
                border: '1px solid #d1d5db',
                color: '#374151',
                backgroundColor: 'white'
              }}
            >
              üîÑ Refresh
            </Button>
          </div>
          <Button
            type="primary"
            icon={<PlusOutlined />}
            onClick={handleAddUser}
            style={{ 
              borderRadius: '8px',
              height: '40px',
              padding: '0 24px',
              fontSize: '14px',
              fontWeight: '600',
              backgroundColor: '#10b981',
              border: 'none',
              boxShadow: '0 2px 4px rgba(16, 185, 129, 0.3)'
            }}
          >
            ‚ûï Th√™m ng∆∞·ªùi d√πng
          </Button>
        </div>
      </div>

      <div style={{
        backgroundColor: 'white',
        borderRadius: '12px',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
        border: '1px solid #e5e7eb',
        overflow: 'hidden'
      }}>
        <Table
          columns={columns}
          dataSource={users}
          rowKey="taiKhoan"
          loading={loading}
          pagination={{ 
            pageSize: 10,
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total, range) => `${range[0]}-${range[1]} c·ªßa ${total} ng∆∞·ªùi d√πng`,
            size: 'default'
          }}
          className="user-management-table"
          rowClassName={(record, index) => 
            index % 2 === 0 ? 'table-row-even' : 'table-row-odd'
          }
          scroll={{ x: 1200 }}
          style={{
            margin: 0
          }}
          tableLayout="fixed"
        />
      </div>

      <Modal
        title={editingUser ? "C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng" : "Th√™m ng∆∞·ªùi d√πng m·ªõi"}
        open={modalVisible}
        onOk={handleModalOk}
        onCancel={() => setModalVisible(false)}
        okText={editingUser ? "C·∫≠p nh·∫≠t" : "Th√™m"}
        cancelText="H·ªßy"
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
        >
          <Form.Item
            name="taiKhoan"
            label="T√†i kho·∫£n"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√†i kho·∫£n!" }]}
          >
            <Input disabled={editingUser} />
          </Form.Item>

          <Form.Item
            name="matKhau"
            label="M·∫≠t kh·∫©u"
            rules={[{ required: !editingUser, message: "Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u!" }]}
          >
            <Input.Password />
          </Form.Item>

          <Form.Item
            name="hoTen"
            label="H·ªç t√™n"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="email"
            label="Email"
            rules={[
              { required: true, message: "Vui l√≤ng nh·∫≠p email!" },
              { type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" },
            ]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="soDt"
            label="S·ªë ƒëi·ªán tho·∫°i"
            rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" }]}
          >
            <Input />
          </Form.Item>

          <Form.Item
            name="maLoaiNguoiDung"
            label="Lo·∫°i ng∆∞·ªùi d√πng"
            rules={[{ required: true, message: "Vui l√≤ng ch·ªçn lo·∫°i ng∆∞·ªùi d√πng!" }]}
          >
            <Select>
              {userTypes.map(type => (
                <Option key={type.maLoaiNguoiDung} value={type.maLoaiNguoiDung}>
                  {type.tenLoai}
                </Option>
              ))}
            </Select>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
}
